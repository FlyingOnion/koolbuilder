package main

// This file contains all customized functions.
// Regeneration will not cover the codes.
// Feel free to modify.

import (
	"context"
	"fmt"

	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/client-go/tools/cache"
{{ range .Imports }}
	{{ .Alias }} {{ quote .Pkg -}}
{{ end }}
)

var _ *{{ (index .Resources 0).GoType }} = nil

func (c *{{ .Name }}) doSync(ctx context.Context, namespace, name string) error {
	// TODO: modify this function

	// ATTENTION: this function may cause error if you regenerate the code with namespace change
	// from ""(global) to non-empty(namespaced) or vice versa

	// if this happens, try switching code like the example below
	//  // when using global lister
	//  c.{{ (index .Resources 0).LowerKind }}Lister.Namespaced(namespace).Get(name)
	//  // when using namespaced lister
	//  c.{{ (index .Resources 0).LowerKind }}Lister.Get(name)

	return nil
}

// Add{{ (index .Resources 0).Kind }} is an event handler of {{ (index .Resources 0).LowerKind }}Informer.
// If you don't know how to modify, just leave it unchanged.
func (c *{{ .Name }}) Add{{ (index .Resources 0).Kind }}(obj any) {
	key, err := cache.MetaNamespaceKeyFunc(obj)
	if err != nil {
		utilruntime.HandleError(fmt.Errorf("couldn't get key for object %+v: %v", obj, err))
		return
	}
	c.queue.AddRateLimited(key)
}

// Update{{ (index .Resources 0).Kind }} is an event handler of {{ (index .Resources 0).LowerKind }}Informer.
// If you don't know how to modify, just leave it unchanged.
func (c *{{ .Name }}) Update{{ (index .Resources 0).Kind }}(oldObj, curObj any) {
	key, err := cache.MetaNamespaceKeyFunc(curObj)
	if err != nil {
		utilruntime.HandleError(fmt.Errorf("couldn't get key for object %+v: %v", curObj, err))
		return
	}
	c.queue.AddRateLimited(key)
}

// Delete{{ (index .Resources 0).Kind }} is an event handler of {{ (index .Resources 0).LowerKind }}Informer.
// If you don't know how to modify, just leave it unchanged.
func (c *{{ .Name }}) Delete{{ (index .Resources 0).Kind }}(obj any) {
	key, err := cache.DeletionHandlingMetaNamespaceKeyFunc(obj)
	if err != nil {
		utilruntime.HandleError(fmt.Errorf("couldn't get key for object %+v: %v", obj, err))
		return
	}
	c.queue.AddRateLimited(key)
}
{{ range (rest .Resources) }}
// Add{{ .Kind }} is an event handler of {{ .LowerKind }}Informer.
// If you don't know how to modify, just leave it unchanged.
func (c *{{ $.Name }}) Add{{ .Kind }}(obj any) {
	{{ .LowerKind }} := obj.(*{{ .GoType }})
	// TODO: do something with {{ .LowerKind }}
	_ = {{ .LowerKind }}
}

// Update{{ .Kind }} is an event handler of {{ .LowerKind }}Informer.
// If you don't know how to modify, just leave it unchanged.
func (c *{{ $.Name }}) Update{{ .Kind }}(oldObj, curObj any) {
	old := oldObj.(*{{ .GoType }})
	cur := curObj.(*{{ .GoType }})
	// TODO: do something with old and cur
	_, _ = old, cur
}

// Delete{{ .Kind }} is an event handler of {{ .LowerKind }}Informer.
// If you don't know how to modify, just leave it unchanged.
func (c *{{ $.Name }}) Delete{{ .Kind }}(obj any) {
	{{ .LowerKind }}, ok := obj.(*{{ .GoType }})
	if !ok {
		// error handling
		tombstone, ok := obj.(cache.DeletedFinalStateUnknown)
		if !ok {
			utilruntime.HandleError(fmt.Errorf("couldn't get object from tombstone %#v", obj))
			return
		}
		{{ .LowerKind }}, ok = tombstone.Obj.(*{{ .GoType }})
		if !ok {
			utilruntime.HandleError(fmt.Errorf("tombstone contained object that is not a {{ .LowerKind }} %#v", obj))
			return
		}
	}
	// TODO: modify expression below
	// do something with {{ .LowerKind }}
	_ = {{ .LowerKind }}
}
{{ end }}