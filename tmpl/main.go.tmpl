// Code generated by koolbuilder. DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"os"
	"os/signal"
	"path/filepath"
	"syscall"
	"time"

	"github.com/FlyingOnion/kool"
	"github.com/spf13/pflag"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"k8s.io/client-go/tools/clientcmd"
	"k8s.io/client-go/util/workqueue"
	"k8s.io/klog/v2"
	{{ .Imports | join "\n\t" }}
)

func mustGetOrLogFatal[T any](v T, err error) T {
	if err != nil {
		klog.Fatal(err)
	}
	return v
}

func addKnownTypes(s *runtime.Scheme) {
{{- range .Resources }}
{{- if .IsCustom }}
	s.AddKnownTypes(schema.GroupVersion{Group: "{{ .Group }}", Version: "{{ .Version }}"}, &{{ .GoType }}{})
{{ end -}}
{{ end -}}
}

func homeDirKubeConfigOrEmpty() (kubeconfig string) {
	if h, err := os.UserHomeDir(); err == nil {
		kubeconfig = filepath.Join(h, ".kube", "config")
	}
	return
}

func main() {
	f := flag.NewFlagSet(os.Args[0], flag.ExitOnError)
	klog.InitFlags(f)
	pflag.CommandLine.AddGoFlagSet(f)
	
	var kubeconfig string
	var master string
	pflag.CommandLine.StringVar(&kubeconfig, "kubeconfig", homeDirKubeConfigOrEmpty(), "absolute path to the kubeconfig file")
	pflag.CommandLine.StringVar(&master, "master", "", "master url")
	pflag.Parse()

	addKnownTypes(scheme.Scheme)

	config := mustGetOrLogFatal(clientcmd.BuildConfigFromFlags(master, kubeconfig))
	httpClient := mustGetOrLogFatal(rest.HTTPClientFor(config))
	// init clients and informers
	{{ .InformerInits | join "\n\t" }}

	queue := workqueue.NewRateLimitingQueue(workqueue.DefaultControllerRateLimiter())
	controller := New{{ .Name }}({{ range .Resources }}{{ .LowerKind }}Informer, {{ end }}queue, {{ .Retry }})

	sigC := make(chan os.Signal, 1)
	signal.Notify(sigC, syscall.SIGINT, syscall.SIGTERM)

	ctx, cancel := context.WithCancel(context.Background())
	{{ .InformerRuns | join "\n\t" }}
	go controller.Run(ctx, 1)

	select {
	case sig := <-sigC:
		klog.Infof("Received signal: %s", sig)
		signal.Stop(sigC)
		cancel()
	case <-ctx.Done():
	}
}
